(function (a, b) { if (typeof define === 'function' && define.amd)define([], b); else if (typeof exports !== 'undefined')b(); else { b(), a.FileSaver = { exports: {} }.exports } })(this, function () { 'use strict'; function b (a, b) { return typeof b === 'undefined' ? b = { autoBom: !1 } : typeof b !== 'object' && (console.warn('Depricated: Expected third argument to be a object'), b = { autoBom: !b }), b.autoBom && /^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(a.type) ? new Blob(['\uFEFF', a], { type: a.type }) : a } function c (b, c, d) { var e = new XMLHttpRequest(); e.open('GET', b), e.responseType = 'blob', e.onload = function () { a(e.response, c, d) }, e.onerror = function () { console.error('could not download file') }, e.send() } function d (a) { var b = new XMLHttpRequest(); return b.open('HEAD', a, !1), b.send(), b.status >= 200 && b.status <= 299 } function e (a) { try { a.dispatchEvent(new MouseEvent('click')) } catch (c) { var b = document.createEvent('MouseEvents'); b.initMouseEvent('click', !0, !0, window, 0, 0, 0, 80, 20, !1, !1, !1, !1, 0, null), a.dispatchEvent(b) } } var f = typeof window === 'object' && window.window === window ? window : typeof self === 'object' && self.self === self ? self : typeof global === 'object' && global.global === global ? global : void 0; var a = f.saveAs || typeof window !== 'object' || window !== f ? function () {} : 'download' in HTMLAnchorElement.prototype ? function (b, g, h) { var i = f.URL || f.webkitURL; var j = document.createElement('a'); g = g || b.name || 'download', j.download = g, j.rel = 'noopener', typeof b === 'string' ? (j.href = b, j.origin === location.origin ? e(j) : d(j.href) ? c(b, g, h) : e(j, j.target = '_blank')) : (j.href = i.createObjectURL(b), setTimeout(function () { i.revokeObjectURL(j.href) }, 4E4), setTimeout(function () { e(j) }, 0)) } : 'msSaveOrOpenBlob' in navigator ? function (f, g, h) { if (g = g || f.name || 'download', typeof f !== 'string')navigator.msSaveOrOpenBlob(b(f, h), g); else if (d(f))c(f, g, h); else { var i = document.createElement('a'); i.href = f, i.target = '_blank', setTimeout(function () { e(i) }) } } : function (a, b, d, e) { if (e = e || open('', '_blank'), e && (e.document.title = e.document.body.innerText = 'downloading...'), typeof a === 'string') return c(a, b, d); var g = a.type === 'application/octet-stream'; var h = /constructor/i.test(f.HTMLElement) || f.safari; var i = /CriOS\/[\d]+/.test(navigator.userAgent); if ((i || g && h) && typeof FileReader === 'object') { var j = new FileReader(); j.onloadend = function () { var a = j.result; a = i ? a : a.replace(/^data:[^;]*;/, 'data:attachment/file;'), e ? e.location.href = a : location = a, e = null }, j.readAsDataURL(a) } else { var k = f.URL || f.webkitURL; var l = k.createObjectURL(a); e ? e.location = l : location.href = l, e = null, setTimeout(function () { k.revokeObjectURL(l) }, 4E4) } }; f.saveAs = a.saveAs = a, typeof module !== 'undefined' && (module.exports = a) })

// # sourceMappingURL=FileSaver.min.js.map
